#lang racket

(define (average x y)
  (/ (+ x y) 2)
  )

(define (point-create x y)
  (cons x y)
  )
(define (point-x p)
  (car p)
  )
(define (point-y p)
  (cdr p)
  )
(define (point-print p)
  (newline)
  (display "(")
  (display (point-x p))
  (display ",")
  (display (point-y p))
  (display ")")
  )

(define (rect-create p0 p1)
  (let ((xmin (min (point-x p0) (point-x p1)))
        (xmax (max (point-x p0) (point-x p1)))
        (ymin (min (point-y p0) (point-y p1)))
        (ymax (max (point-y p0) (point-y p1))))
    (cons (point-create xmin ymin) (point-create xmax ymax)))
  )
(define (rect-topleft r)
  (car r)
  )
(define (rect-bottomright r)
  (cdr r)
  )
(define (rect-width r)
  (- (point-x (rect-bottomright r)) (point-x (rect-topleft r)))
  )
(define (rect-height r)
  (- (point-y (rect-bottomright r)) (point-y (rect-topleft r)))
  )
(define (rect-area r)
  (* (rect-width r) (rect-height r))
  )
(define (rect-girth r)
  (* 2 (+ (rect-width r) (rect-height r)))
  )

(define (rect2-create p0 p1)
  (let ((xmin (min (point-x p0) (point-x p1)))
        (xmax (max (point-x p0) (point-x p1)))
        (ymin (min (point-y p0) (point-y p1)))
        (ymax (max (point-y p0) (point-y p1))))
    (cons (point-create xmin ymin) (cons (- xmax xmin) (- ymax ymin))))
  )
(define (rect2-topleft r)
  (car r)
  )
(define (rect2-bottomright r)
  (let ((p0 (rect2-topleft r))(w (rect2-width r))(h (rect2-height r)))
    (point-create (+ w (point-x p0)) (+ h (point-y p0))))
  )
(define (rect2-width r)
  (car (cdr r))
  )
(define (rect2-height r)
  (cdr (cdr r))
  )
(define (rect2-area r)
  (* (rect2-width r) (rect2-height r))
  )
(define (rect2-girth r)
  (* 2 (+ (rect2-width r) (rect2-height r)))
  )

(let
  ((r0 (rect-create (point-create 1 -1) (point-create -2 1)))
   (r1 (rect-create (point-create 1 -1) (point-create 0 0))))
  (newline)
  (pretty-print (rect-area r0))
  (pretty-print (rect-girth r0))
  (pretty-print (rect-area r1))
  (pretty-print (rect-girth r1))
  )

(let
  ((r0 (rect2-create (point-create 1 -1) (point-create -2 1)))
   (r1 (rect2-create (point-create 1 -1) (point-create 0 0))))
  (newline)
  (pretty-print (rect2-area r0))
  (pretty-print (rect2-girth r0))
  (pretty-print (rect2-area r1))
  (pretty-print (rect2-girth r1))
  )
