#lang racket

(define (average x y)
 (/ (+ x y) 2)
 )

(define (point-create x y)
 (cons x y)
 )
(define (point-x p)
 (car p)
 )
(define (point-y p)
 (cdr p)
 )
(define (point-print p)
 (newline)
 (display "(")
 (display (point-x p))
 (display ",")
 (display (point-y p))
 (display ")")
 )

(define (segment-create start end)
 (cons start end)
 )
(define (segment-startpoint seg)
 (car seg)
 )
(define (segment-endpoint seg)
 (cdr seg)
 )
(define (segment-midpoint seg)
  (let ((start (segment-startpoint seg))(end (segment-endpoint seg)))
    (point-create (average (point-x start) (point-x end)) 
                  (average (point-y start) (point-y end))))
  )

(define seg (segment-create (point-create 1 1 ) (point-create -3 3)))
(point-print (segment-midpoint seg))
