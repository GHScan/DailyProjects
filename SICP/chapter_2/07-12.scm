#lang racket

(define (average a b) 
  (/ (+ a b) 2)
  )

(define (interval-create a b)
  (if (<= a b) 
    (cons a b)
    (cons b a))
  )
(define (interval-create-center-width c w)
  (interval-create (- c w) (+ c w))
  )
(define (interval-create-center-percent c percent)
  (interval-create-center-width c (/ (* c percent) 100))
  )
(define (interval-lower-bound i)
  (car i)
  )
(define (interval-upper-bound i)
  (cdr i)
  )
(define (interval-center i)
  (average (interval-lower-bound i) (interval-upper-bound i))
  )
(define (interval-width i)
  (/ (- (interval-upper-bound i) (interval-lower-bound i))  2)
  )
(define (interval-percent i)
  (* 100.0 (/ (interval-width i) (interval-center i)))
  )
(define (interval-add a b)
  (interval-create
    (+ (interval-lower-bound a) (interval-lower-bound b))
    (+ (interval-upper-bound a) (interval-upper-bound b)))
  )
(define (interval-sub a b)
  (interval-add a
                (interval-create (- (interval-upper-bound b)) 
                                 (- (interval-lower-bound b))))
  )
(define (interval-mul a b)
  (let ((al (interval-lower-bound a))(au (interval-upper-bound a))(bl (interval-lower-bound b))(bu (interval-upper-bound b)))
    (cond
      ((<= au 0)
       (cond
         ((<= bu 0) (interval-create (* au bu) (* al bl)))
         ((>= bl 0) (interval-create (* al bu) (* au bl)))
         (else (interval-create (* al bu) (* al bl)))
         )
       )
      ((>= al 0)
       (cond
         ((<= bu 0) (interval-create (* au bl) (* al bu)))
         ((>= bl 0) (interval-create (* al bl) (* au bu)))
         (else (interval-create (* au bl) (* au bu)))
         )
       )
      (else
        (cond
          ((<= bu 0) (interval-create (* au bl) (* al bl)))
          ((>= bl 0) (interval-create (* al bu) (* au bu)))
          (else (interval-create (min (* au bl) (* al bu)) (max (* al bl) (* au bu))))
          )
        )
      ))
  )
(define (interval-div a b)
  (interval-mul a
                (interval-create (/ 1 (interval-upper-bound b))
                                 (/ 1 (interval-lower-bound b))))
  )

(define r1 (interval-create-center-percent 6.8 10))
(define r2 (interval-create-center-percent 4.7 5))
(define one (interval-create 1 1))
(define rp (interval-div one (interval-add (interval-div one r1) (interval-div one r2))))
(pretty-print rp)
(pretty-print (interval-div r1 r1))
(pretty-print (interval-div r1 r2))
