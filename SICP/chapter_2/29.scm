#lang racket
(require racket/pretty)

;(define (make-mobile left right)
;  (cons left right)
;  )
;(define (make-branch len item)
;  (cons len item)
;  )
;(define (left-branch mobile)
;  (car mobile)
;  )
;(define (right-branch mobile)
;  (cdr mobile)
;  )
;(define (branch-length b)
;  (car b)
;  )
;(define (branch-item b)
;  (cdr b)
;  )

(define (make-mobile left right)
  (list left right)
  )
(define (make-branch len item)
  (list len item)
  )
(define (left-branch mobile)
  (list-ref mobile 0)
  )
(define (right-branch mobile)
  (list-ref mobile 1)
  )
(define (branch-length b)
  (list-ref b 0)
  )
(define (branch-item b)
  (list-ref b 1)
  )


(define (mobile-item? item)
  (pair? item)
  )
(define (branch-weight b)
  (let ((item (branch-item b)))
    (if (mobile-item? item) (total-weight item) item))
  )
(define (branch-balance? b)
  (let ((item (branch-item b)))
    (if (mobile-item? item) (balance? item) true))
  )

(define (total-weight mobile)
  (+ (branch-weight (left-branch mobile)) (branch-weight (right-branch mobile)))
  )
(define (balance? mobile)
  (let ((lb (left-branch mobile))(rb (right-branch mobile)))
    (and 
      (branch-balance? lb) 
      (branch-balance? rb)
      (= (* (branch-length lb) (branch-weight lb))
         (* (branch-length rb) (branch-weight rb)))))
  )

; test
(define x (make-mobile (make-branch 1 (make-mobile (make-branch 3 2)
                                                   (make-branch 1 6))) 
                       (make-branch 2 4)))
(pretty-print (total-weight x))
(pretty-print (balance? x))

(define x2 (make-mobile (make-branch 1 (make-mobile (make-branch 3 2)
                                                   (make-branch 1 7))) 
                       (make-branch 2 4)))
(pretty-print (total-weight x2))
(pretty-print (balance? x2))
