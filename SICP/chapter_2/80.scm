#lang racket

(define global (make-hash))
(define (get op types)
  (hash-ref global (list op types) false)
  )
(define (put op types proc)
  (hash-set! global (list op types) proc)
  )

(define (attach-tag type-tag contents)
  (cond 
    ((eq? 'scheme-number type-tag) contents)
    (else (cons type-tag contents)))
  )
(define (type-tag x)
  (cond
    ((number? x) 'scheme-number)
    ((pair? x) (car x))
    (else (error "invalid taged-type" x)))
  )
(define (contents x)
  (cond
    ((number? x) x)
    ((pair? x) (cdr x))
    (else (error "invalid taged-type" x)))
  )

(define (apply-generic op . args)
  (let ((proc (get op (map type-tag args))))
    (if proc
      (apply proc (map contents args))
      (error "could not find op: " op (map type-tag args)))
    )
  )

(define (install-scheme-number-package)
  (define tag 'scheme-number)
  (put 'make (list tag) identity)
  (put 'add (list tag tag) +)
  (put 'sub (list tag tag) -)
  (put 'mul (list tag tag) *)
  (put 'div (list tag tag) /)
  )

(define (install-rational-package)
  (define (make n d) (let ((_gcd (gcd n d))) (cons (/ n _gcd) (/ d _gcd))))
  (define (numer x) (car x))
  (define (denom x) (cdr x))

  (define (add x y)
    (make (+ (* (numer x) (denom y)) (* (numer y) (denom x)))
          (* (denom x) (denom y)))
    )
  (define (sub x y)
    (make (- (* (numer x) (denom y)) (* (numer y) (denom x)))
          (* (denom x) (denom y)))
    )
  (define (mul x y)
    (make (* (numer x) (numer y))
          (* (denom x) (denom y)))
    )
  (define (div x y)
    (make (* (numer x) (denom y))
          (* (denom x) (numer y)))
    )

  (define tag 'rational)
  (put 'make (list tag) (lambda (x y) (attach-tag tag (make x y))))
  (put 'add (list tag tag) (lambda (x y) (attach-tag tag (add x y))))
  (put 'sub (list tag tag) (lambda (x y) (attach-tag tag (sub x y))))
  (put 'mul (list tag tag) (lambda (x y) (attach-tag tag (mul x y))))
  (put 'div (list tag tag) (lambda (x y) (attach-tag tag (div x y))))
  )

(define (install-rectangular-package)
  (define (make real imag) (cons real imag))
  (define (real-part x) (car x))
  (define (imag-part x) (cdr x))
  (define (magnitude x) (sqrt (+ (sqr (real-part x)) (sqr (imag-part x)))))
  (define (angle x) (atan (/ (imag-part x) (real-part x))))

  (define tag 'rectangular)
  (put 'make-from-real-imag (list tag) (lambda (x y) (attach-tag tag (make x y))))
  (put 'real-part (list tag) real-part)
  (put 'imag-part (list tag) imag-part)
  (put 'magnitude (list tag) magnitude)
  (put 'angle (list tag) angle)
  )

(define (install-polar-package)
  (define (make mag angle) (cons mag angle))
  (define (real-part x) (* (magnitude x) (cos (angle x))))
  (define (imag-part x) (* (magnitude x) (sin (angle x))))
  (define (magnitude x) (car x))
  (define (angle x) (cdr x))

  (define tag 'polar)
  (put 'make-from-mag-angle (list tag) (lambda (x y) (attach-tag tag (make x y))))
  (put 'real-part (list tag) real-part)
  (put 'imag-part (list tag) imag-part)
  (put 'magnitude (list tag) magnitude)
  (put 'angle (list tag) angle)
  )

(define (install-complex-package)
  (install-polar-package)
  (install-rectangular-package)

  (define (make-from-real-imag real imag)
    ((get 'make-from-real-imag '(rectangular)) real imag)
    )
  (define (make-from-mag-angle mag angle)
    ((get 'make-from-mag-angle '(polar)) mag angle)
    )
  (define (real-part x) 
    (apply-generic 'real-part x)
    )
  (define (imag-part x) 
    (apply-generic 'imag-part x)
    )
  (define (magnitude x) 
    (apply-generic 'magnitude x)
    )
  (define (angle x) 
    (apply-generic 'angle x)
    )

  (define (add x y)
    (make-from-real-imag (+ (real-part x) (real-part y))
                         (+ (imag-part x) (imag-part y)))
    )
  (define (sub x y)
    (make-from-real-imag (- (real-part x) (real-part y))
                         (- (imag-part x) (imag-part y)))
    )
  (define (mul x y)
    (make-from-mag-angle (* (magnitude x) (magnitude y))
                         (+ (angle x) (angle y)))
    )
  (define (div x y)
    (make-from-mag-angle (/ (magnitude x) (magnitude y))
                         (- (angle x) (angle y)))
    )

  (define tag 'complex)
  (put 'make-from-real-imag (list tag) (lambda (x y) (attach-tag tag (make-from-real-imag x y))))
  (put 'make-from-mag-angle (list tag) (lambda (x y) (attach-tag tag (make-from-mag-angle x y))))
  (put 'add (list tag tag) (lambda (x y) (attach-tag tag (add x y))))
  (put 'sub (list tag tag) (lambda (x y) (attach-tag tag (sub x y))))
  (put 'mul (list tag tag) (lambda (x y) (attach-tag tag (mul x y))))
  (put 'div (list tag tag) (lambda (x y) (attach-tag tag (div x y))))
  (put 'real-part (list tag) real-part)
  (put 'imag-part (list tag) imag-part)
  (put 'magnitude (list tag) magnitude)
  (put 'angle (list tag) angle)
  )

;
(install-scheme-number-package)
(install-rational-package)
(install-complex-package)

(define make-scheme-number (lambda (x) ((get 'make '(scheme-number)) x)))
(define make-rational (lambda (n d) ((get 'make '(rational)) n d)))
(define make-complex-from-real-imag (lambda (real imag) ((get 'make-from-real-imag '(complex)) real imag)))
(define make-complex-from-mag-angle (lambda (mag angle) ((get 'make-from-mag-angle '(complex)) mag angle)))
(define print-complex (lambda (x) (pretty-print (list (apply-generic 'real-part x) (apply-generic 'imag-part x)))))
(define add (lambda (x y) (apply-generic 'add x y)))
(define sub (lambda (x y) (apply-generic 'sub x y)))
(define mul (lambda (x y) (apply-generic 'mul x y)))
(define div (lambda (x y) (apply-generic 'div x y)))

(let ((x (make-scheme-number 2))(y (make-scheme-number 3)))
  (pretty-print (add x y))
  (pretty-print (sub x y))
  (pretty-print (mul x y))
  (pretty-print (div x y))
  )
(let ((x (make-rational 1 3))(y (make-rational 2 9)))
  (pretty-print (add x y))
  (pretty-print (sub x y))
  (pretty-print (mul x y))
  (pretty-print (div x y))
  )
(let ((x (make-complex-from-real-imag 1 2))(y (make-complex-from-mag-angle 2.236068 0.46365)))
  (print-complex (add x y))
  (print-complex (sub x y))
  (print-complex (mul x y))
  (print-complex (div x y))
  )
