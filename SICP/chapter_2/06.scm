#lang racket

(define zero (lambda (f) (lambda (x) x)))
(define one (lambda (f) (lambda (x) (f x))))
(define two (lambda (f) (lambda (x) (f (f x)))))
(define (add a b)
  (lambda (f) (lambda (x) ((a f) ((b f) x))))
  )
(define (equal? a b)
  (lambda (f) (lambda (x) (= ((a f) x) ((b f) x))))
  )

(define (add-equal? a b)
 (define (add1 x) (+ x 1))
  (((equal? a b) add1) 3)
  )
(define (sub-equal? a b)
 (define (sub1 x) (- x 1))
  (((equal? a b) sub1) 3)
  )
(define (square-equal? a b)
 (define (square x) (* x x))
  (((equal? a b) square) 3)
  )

(pretty-print (add-equal? one (add one zero)))
(pretty-print (add-equal? one (add zero one)))
(pretty-print (sub-equal? two (add one one)))
(pretty-print (sub-equal? two (add two zero)))
(pretty-print (square-equal? (add (add one one) one) (add two one)))
