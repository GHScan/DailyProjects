#lang racket

(define (cons x y)
  (lambda (m arg)
    (cond
      ((eq? m 'car) x)
      ((eq? m 'cdr) y)
      ((eq? m 'set-car!) (set! x arg))
      ((eq? m 'set-cdr!) (set! y arg))
      ))
  )
(define (car p)
  (p 'car true)
  )
(define (cdr p)
  (p 'cdr true)
  )
(define (set-car! p x)
  (p 'set-car! x)
  )
(define (set-cdr! p y)
  (p 'set-cdr! y)
  )

;(define (cons x y)
;  (lambda (op f)
;   (cond
;    ((= -1 op) (f x y))
;    ((= 0 op) (set! x (f)))
;    ((= 1 op) (set! y (f)))
;    )
;  )
;  )
;(define (car p)
;  (p -1 (lambda (x y) x))
;  )
;(define (cdr p)
;  (p -1 (lambda (x y) y))
;  )
;(define (set-car! p x)
;  (p 0 (lambda () x))
;  )
;(define (set-cdr! p y)
;  (p 1 (lambda () y))
;  )

(define x (cons 1 2))
(define z (cons x x))
(set-car! (cdr z) 17)
(display (car x))
(newline)
(display (car (car z)))
