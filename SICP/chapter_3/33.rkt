#lang racket

(provide (all-defined-out))
;------------------------------
(define (make-connector)
  (let ((value false)(owner false)(constraints empty))
    (define (notify-value exception)
      (for-each (lambda (c) (if (eq? c exception) 'ignore (c 'on-set-value))) constraints)
      )
    (define (notify-forget exception)
      (for-each (lambda (c) (if (eq? c exception) 'ignore (c 'on-forget))) constraints)
      )
    (define (set-value! new-value new-owner)
      (cond
        ((not owner) (set! value new-value) (set! owner new-owner) (notify-value new-owner))
        ((not (= value new-value)) (error "Can not set value again!" value owner))
        (else 'ignore))
      )
    (define (forget! new-owner)
      (if (eq? owner new-owner) 
        (begin (set! value false) 
               (set! owner false)
               (notify-forget new-owner))
        'ignore)
      )
    (define (connect! constraint)
      (if (memq constraint constraints)
        'ignore
        (begin (set! constraints (cons constraint constraints))
               (if owner (constraint 'on-set-value) 'ignore)))
      )
    (lambda (m . args)
      (cond 
        ((eq? m 'has-value?) owner)
        ((eq? m 'get-value) value)
        ((eq? m 'set-value!) (apply set-value! args))
        ((eq? m 'forget!) (apply forget! args))
        ((eq? m 'connect!) (apply connect! args))
        (else (error "Invalid message for connector!" m)))))
  )

;------------------------------
(define (constant x c)
  (define (me m)
    (error "Can't notify constant constraints!")
    )
  (c 'connect! me)
  (c 'set-value! x me)
  me)

(define (adder a b c)
  (define (on-set-value)
    (cond 
      ((and (a 'has-value?) (b 'has-value?)) 
       (c 'set-value! (+ (a 'get-value) (b 'get-value)) me))
      ((and (a 'has-value?) (c 'has-value?)) 
       (b 'set-value! (- (c 'get-value) (a 'get-value)) me))
      ((and (b 'has-value?) (c 'has-value?)) 
       (a 'set-value! (- (c 'get-value) (b 'get-value)) me))
      (else 'ignore))
    )
  (define (on-forget)
    (a 'forget! me)
    (b 'forget! me)
    (c 'forget! me)
    (on-set-value)
    )
  (define (me m)
    (cond
      ((eq? m 'on-forget) (on-forget))
      ((eq? m 'on-set-value) (on-set-value))
      (else (error "Invalid message!")))
    )
  (a 'connect! me)
  (b 'connect! me)
  (c 'connect! me)
  me)

(define (multiplier a b c)
  (define (on-set-value)
    (cond 
      ((or (and (a 'has-value?) (= 0 (a 'get-value))) (and (b 'has-value?) (= 0 (b 'get-value)))) 
       (c 'set-value! 0 me))
      ((and (a 'has-value?) (b 'has-value?)) 
       (c 'set-value! (* (a 'get-value) (b 'get-value)) me))
      ((and (a 'has-value?) (c 'has-value?)) 
       (if (= 0 (a 'get-value)) (error "divide 0!") 'ignore)
       (b 'set-value! (/ (c 'get-value) (a 'get-value)) me))
      ((and (b 'has-value?) (c 'has-value?)) 
       (if (= 0 (b 'get-value)) (error "divide 0!") 'ignore)
       (a 'set-value! (/ (c 'get-value) (b 'get-value)) me))
      (else 'ignore))
    )
  (define (on-forget)
    (a 'forget! me)
    (b 'forget! me)
    (c 'forget! me)
    (on-set-value)
    )
  (define (me m)
    (cond
      ((eq? m 'on-forget) (on-forget))
      ((eq? m 'on-set-value) (on-set-value))
      (else (error "Invalid message!")))
    )
  (a 'connect! me)
  (b 'connect! me)
  (c 'connect! me)
  me)

;------------------------------
(define (probe name c)
  (define (print-probe value)
    (printf "\nProbe ~a = ~a" name value)
    )
  (define (me m)
    (cond 
      ((eq? m 'on-set-value) (print-probe (c 'get-value)))
      ((eq? m 'on-forget) (print-probe "?"))
      (else (error "Invalid message!")))
    )
  (c 'connect! me)
  me)

;------------------------------

(define (celsius-fahrenheit-converter c f)
  (define w (make-connector))
  (define u (make-connector))
  (define v (make-connector))
  (define x (make-connector))
  (define y (make-connector))
  (constant 9 w)
  (constant 5 x)
  (constant 32 y)
  (adder v y f)
  (multiplier v x u)
  (multiplier c w u)
  )

(let ((c (make-connector))(f (make-connector)))
  (printf "\n------ celsius-fahrenheit-converter -----")
  (celsius-fahrenheit-converter c f)
  (probe "Celsius tmp" c)
  (probe "Fahrenheit tmp" f)
  (c 'set-value! 25 'user)
  (c 'forget! 'user)
  (f 'set-value! 212 'user)
  )

;------------------------------
(define (averager a b c)
  (define w (make-connector))
  (define u (make-connector))
  (constant 2 w)
  (multiplier w c u)
  (adder a b u)
  )

(let ((a (make-connector))(b (make-connector))(c (make-connector)))
  (printf "\n------ averager -----")
  (averager a b c)
  (probe "A" a)
  (probe "B" b)
  (probe "C" c)
  (a 'set-value! 25 'user)
  (b 'set-value! 10 'user)
  (b 'forget! 'user)
  (c 'set-value! 20 'user)
  )
