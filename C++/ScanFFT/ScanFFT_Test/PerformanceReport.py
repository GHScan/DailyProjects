#vim:fileencoding=utf-8

double_precision_benchmark = [
"ScanFFT\n\
        2^2: 0.005660 us 2^3: 0.009937 us 2^4: 0.020247 us 2^5: 0.039893 us 2^6: 0.090398 us 2^7: 0.227764 us 2^8: 0.540075 us 2^9: 1.413816 us 2^10: 3.423949 us 2^11: 8.705766 us 2^12: 19.231546 us 2^13: 45.163111 us 2^14: 101.791033 us 2^15: 239.343166 us 2^16: 532.225277 us 2^17: 1248.897531 us 2^18: 3618.922828 us 2^19: 9173.026250 us 2^20: 20931.479063 us 2^21: 46121.928000 us 2^22: 99329.407250 us 2^23: 215550.649500 us 2^24: 479958.161000 us",
"Eigen C++\n\
        2^2: 0.029143 us 2^3: 0.073629 us 2^4: 0.165334 us 2^5: 0.392684 us 2^6: 0.860470 us 2^7: 2.099621 us 2^8: 4.422548 us 2^9: 9.733137 us 2^10: 20.943952 us 2^11: 46.830123 us 2^12: 97.514787 us 2^13: 217.099166 us 2^14: 467.944555 us 2^15: 1018.298258 us 2^16: 2294.098047 us 2^17: 5509.359188 us 2^18: 17931.745188 us 2^19: 39482.750375 us 2^20: 101062.642000 us 2^21: 241127.799500 us 2^22: 565558.923000 us 2^23: 1274752.164000 us 2^24: 2869562.899000 us",
"fftw3 estimate\n\
        2^2: 0.019903 us 2^3: 0.027295 us 2^4: 0.045500 us 2^5: 0.082414 us 2^6: 0.120721 us 2^7: 0.237984 us 2^8: 0.509205 us 2^9: 1.122954 us 2^10: 2.552185 us 2^11: 6.417468 us 2^12: 18.225350 us 2^13: 44.843113 us 2^14: 100.384066 us 2^15: 227.192547 us 2^16: 520.935828 us 2^17: 1185.360187 us 2^18: 3300.773187 us 2^19: 15199.068750 us 2^20: 34158.729500 us 2^21: 78615.560500 us 2^22: 199265.495000 us 2^23: 468799.826000 us 2^24: 1036200.585000 us",
"fftw3 measure\n\
        2^2: 0.009581 us 2^3: 0.014884 us 2^4: 0.030869 us 2^5: 0.057567 us 2^6: 0.101685 us 2^7: 0.211407 us 2^8: 0.441372 us 2^9: 1.006859 us 2^10: 2.435206 us 2^11: 5.973245 us 2^12: 15.925809 us 2^13: 36.915670 us 2^14: 93.872133 us 2^15: 193.272102 us 2^16: 419.216875 us 2^17: 951.608625 us 2^18: 3010.650813 us 2^19: 11666.031750 us 2^20: 21018.392250 us 2^21: 48927.700000 us 2^22: 99816.569000 us 2^23: 209901.861000 us 2^24: 461945.373000 us",
"acm tempate\n\
        2^2: 0.062168 us 2^3: 0.117608 us 2^4: 0.221078 us 2^5: 0.449748 us 2^6: 0.942373 us 2^7: 2.095933 us 2^8: 4.746445 us 2^9: 10.357794 us 2^10: 22.766678 us 2^11: 50.627132 us 2^12: 114.096557 us 2^13: 251.487518 us 2^14: 553.358938 us 2^15: 1228.570609 us 2^16: 2556.063266 us 2^17: 5306.420406 us 2^18: 11467.462562 us 2^19: 28298.686375 us 2^20: 65082.793750 us 2^21: 135470.812000 us 2^22: 281737.100000 us 2^23: 602935.668000 us 2^24: 1250711.256000 us",
"cpp cookbook\n\
        2^2: 0.109812 us 2^3: 0.189425 us 2^4: 0.317168 us 2^5: 0.556417 us 2^6: 1.107081 us 2^7: 2.236040 us 2^8: 4.751227 us 2^9: 10.334803 us 2^10: 23.186108 us 2^11: 52.842949 us 2^12: 157.894957 us 2^13: 389.784287 us 2^14: 965.509461 us 2^15: 2446.219719 us 2^16: 6446.361859 us 2^17: 15417.762312 us 2^18: 35176.060063 us 2^19: 80675.648500 us 2^20: 208856.786750 us 2^21: 483802.265500 us 2^22: 1029341.612000 us 2^23: 2272183.478000 us 2^24: 5715041.494000 us",
        ]

single_precision_benchmark = [
"ScanFFT\n\
        2^2: 0.005882 us 2^3: 0.008189 us 2^4: 0.014007 us 2^5: 0.028084 us 2^6: 0.049778 us 2^7: 0.112617 us 2^8: 0.279296 us 2^9: 0.726032 us 2^10: 1.696286 us 2^11: 3.789784 us 2^12: 9.090214 us 2^13: 20.195113 us 2^14: 47.907186 us 2^15: 106.744168 us 2^16: 243.141816 us 2^17: 550.572273 us 2^18: 1333.348328 us 2^19: 3765.086688 us 2^20: 9250.199937 us 2^21: 21556.044375 us 2^22: 46708.542000 us 2^23: 103354.228500 us 2^24: 226887.109000 us",
"Eigen C++\n\
        2^2: 0.026134 us 2^3: 0.073262 us 2^4: 0.134978 us 2^5: 0.368059 us 2^6: 0.701454 us 2^7: 1.758627 us 2^8: 3.250545 us 2^9: 8.126867 us 2^10: 15.194971 us 2^11: 36.922658 us 2^12: 71.248622 us 2^13: 168.917688 us 2^14: 333.149186 us 2^15: 845.832676 us 2^16: 1748.003227 us 2^17: 4394.662648 us 2^18: 10209.873156 us 2^19: 32636.726313 us 2^20: 71857.200687 us 2^21: 187991.215500 us 2^22: 446277.709500 us 2^23: 1047718.542500 us 2^24: 2453191.226000 us",
"fftwf3 estimate\n\
        2^2: 0.020325 us 2^3: 0.028691 us 2^4: 0.048577 us 2^5: 0.089945 us 2^6: 0.073045 us 2^7: 0.139401 us 2^8: 0.284831 us 2^9: 0.613621 us 2^10: 1.276350 us 2^11: 2.942038 us 2^12: 9.514741 us 2^13: 26.840536 us 2^14: 56.687779 us 2^15: 142.039482 us 2^16: 327.777902 us 2^17: 746.292031 us 2^18: 1768.576094 us 2^19: 9208.448000 us 2^20: 25945.896188 us 2^21: 62642.104250 us 2^22: 149345.458000 us 2^23: 332507.088500 us 2^24: 871520.150000 us",
"fftwf3 measure\n\
        2^2: 0.014036 us 2^3: 0.024250 us 2^4: 0.049287 us 2^5: 0.040288 us 2^6: 0.063215 us 2^7: 0.124809 us 2^8: 0.242458 us 2^9: 0.535405 us 2^10: 1.220656 us 2^11: 2.889325 us 2^12: 6.811809 us 2^13: 21.647146 us 2^14: 49.816230 us 2^15: 135.047867 us 2^16: 284.333230 us 2^17: 624.290984 us 2^18: 1390.347188 us 2^19: 7953.128094 us 2^20: 17005.082500 us 2^21: 37795.015500 us 2^22: 77346.360250 us 2^23: 168548.984500 us 2^24: 383664.308000 us",
"acm template\n\
        2^2: 0.064891 us 2^3: 0.124022 us 2^4: 0.223864 us 2^5: 0.460233 us 2^6: 0.992844 us 2^7: 2.166612 us 2^8: 4.803569 us 2^9: 10.621390 us 2^10: 23.154638 us 2^11: 51.092286 us 2^12: 112.842904 us 2^13: 249.646767 us 2^14: 548.235443 us 2^15: 1187.453141 us 2^16: 2638.447703 us 2^17: 5495.939789 us 2^18: 11450.050359 us 2^19: 24290.028813 us 2^20: 57381.912375 us 2^21: 125422.338625 us 2^22: 262010.057750 us 2^23: 541566.079500 us 2^24: 1134684.294000 us",
"sleepwalking\n\
 2^2: 0.026250 us 2^3: 0.090967 us 2^4: 0.108127 us 2^5: 0.150908 us 2^6: 0.231587 us 2^7: 0.423333 us 2^8: 0.816786 us 2^9: 1.756054 us 2^10: 3.757429 us 2^11: 8.361273 us 2^12: 19.613903 us 2^13: 43.967512 us 2^14: 107.302417 us 2^15: 256.811400 us 2^16: 592.159195 us 2^17: 1396.124625 us 2^18: 4205.577859 us 2^19: 10325.939344 us 2^20: 22002.867063 us 2^21: 71785.297125 us 2^22: 2453191000000.0 us 2^23: 2453191000000.0 us 2^24: 2453191000000.0 us",
        ]


import re
import matplotlib.pyplot as plt

benchObjs = [
        {'name' : 'Single-Precision Complex', 'bench' : single_precision_benchmark },
        {'name' : 'Double-Precision Complex', 'bench' : double_precision_benchmark },
        ]

plt.figure(figsize=(6, 7))

for i, benchObj in zip(range(len(benchObjs)), benchObjs):

    ys = []
    names = []
    for o in benchObj['bench']:
        name, numStr = o.split('\n')
        y = [float(s) for s in re.findall('\d+\.\d+', numStr)]
        names.append(name.strip())
        ys.append(y)
    x = range(2,len(ys[0])+2)

    plt.subplot(2, 1, i + 1)
    plt.title(benchObj['name'], fontsize=16)
    plt.grid(True)
    plt.xlabel('Size (log2)')
    plt.ylabel('Speed (mflops)')
    for y in ys:
        y2 = [(1<<i)*i*5/v for i,v in zip(x, y)]
        plt.plot(x, y2)
    plt.legend(names, fontsize=8)

plt.tight_layout()
plt.show()
