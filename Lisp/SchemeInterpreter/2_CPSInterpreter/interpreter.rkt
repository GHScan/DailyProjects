#lang racket

(require "core.rkt")
;------------------------------
(define (read-file fname)
  (let ([port (open-input-file fname)])
    (do ([data (read port) (read port)][result empty (cons data result)])
      ((eof-object? data) (close-input-port port) (reverse result))))
  )
(define (eval-and-print datum)
  (let ([v (eval G datum)])
    (if (eq? the-void v)
      the-void
      (pretty-print v)))
  )
(define (load fname)
  (for-each eval-and-print (read-file fname))
  )

(define (setup-env)
  (let ([native-procedures (list 
                             (cons '+ +)
                             (cons '- -)
                             (cons '* *)
                             (cons '/ /)
                             (cons '< <)
                             (cons '<= <=)
                             (cons '> >)
                             (cons '>= >=)
                             (cons '= =)
                             (cons 'not not)
                             (cons 'quotient quotient)
                             (cons 'remainder remainder)
                             (cons 'cons cons)
                             (cons 'car car)
                             (cons 'cdr cdr)
                             (cons 'caar caar)
                             (cons 'cdar cdar)
                             (cons 'cadar cadar)
                             (cons 'caddar caddar)
                             (cons 'cadr cadr)
                             (cons 'caddr caddr)
                             (cons 'pair? pair?)
                             (cons 'null? null?)
                             (cons 'empty? empty?)
                             (cons 'list list)
                             (cons 'identity identity)
                             (cons 'length length)
                             (cons 'append append)
                             (cons 'pretty-print pretty-print)
                             (cons 'print print)
                             (cons 'printf printf)
                             (cons 'display display)
                             (cons 'exit exit)
                             (cons 'current-inexact-milliseconds current-inexact-milliseconds)
                             (cons 'range range)
                             (cons 'eq? eq?)
                             (cons 'random random)
                             (cons 'read-file read-file)
                             (cons 'load load)
                             (cons 'zero? zero?)
                             (cons 'equal? equal?)
                             (cons 'sort sort)
                             (cons 'add1 add1)
                             (cons 'last last)
                             (cons 'drop-right drop-right)
                             (cons 'string-append string-append)
                             (cons 'number->string number->string)
                             (cons 'gensym gensym)
                             (cons 'sqr sqr)
                             )]
        [native-variables (list
                            (cons 'empty empty)
                            (cons 'true true)
                            (cons 'false false)
                            (cons 'else true)
                            )])
    (for-each (lambda (p) (builtin-register (car p) (native-procedure->script-procedure (cdr p)))) native-procedures)
    (for-each (lambda (p) (builtin-register (car p) (cdr p))) native-variables)
    ))
;------------------------------
(setup-env)
(load "scripts/library.rkt")
(load "scripts/library2.rkt")

(define (do-REPL)
  (let ([data (read)])
    (if (eof-object? data)
      'exit
      (begin (eval-and-print data)
             (do-REPL))))
  )

(let ([fnames (vector->list (current-command-line-arguments))])
  (if (empty? fnames)
    (do-REPL)
    (for-each (lambda (fname) (load fname)) fnames)))
