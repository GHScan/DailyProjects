#lang racket

(require "core.rkt")
;------------------------------
(define (read-file fname)
  (let ([port (open-input-file fname)])
    (do ([data (read port) (read port)][result empty (cons data result)])
      ((eof-object? data) (close-input-port port) (cons 'begin (reverse result)))))
  )

(define (setup-env)
  (let ([builtins (list 
                    (cons '+ +)
                    (cons '- -)
                    (cons '* *)
                    (cons '/ /)
                    (cons '< <)
                    (cons '<= <=)
                    (cons '> >)
                    (cons '>= >=)
                    (cons '= =)
                    (cons 'not not)
                    (cons 'quotient quotient)
                    (cons 'remainder remainder)
                    (cons 'cons cons)
                    (cons 'car car)
                    (cons 'cdr cdr)
                    (cons 'pair? pair?)
                    (cons 'null? null?)
                    (cons 'empty empty)
                    (cons 'list list)
                    (cons 'true true)
                    (cons 'false false)
                    (cons 'else true)
                    (cons 'identity identity)
                    (cons 'length length)
                    (cons 'append append)
                    (cons 'pretty-print pretty-print)
                    (cons 'print print)
                    (cons 'printf printf)
                    (cons 'display display)
                    (cons 'exit exit)
                    (cons 'current-inexact-milliseconds current-inexact-milliseconds)
                    (cons 'range range)
                    (cons 'eq? eq?)
                    (cons 'random random)
                    (cons 'read-file read-file)
                    )])
    (for-each (lambda (p) (builtin-register (car p) (cdr p))) builtins)
    ))
;------------------------------
(setup-env)
(eval G (read-file "scripts/library.rkt"))

(define (do-REPL)
  (let ([data (read)])
    (if (eof-object? data)
      'exit
      (begin (pretty-print (eval G data))
             (do-REPL))))
  )

(let ([fnames (vector->list (current-command-line-arguments))])
  (if (empty? fnames)
    (do-REPL)
    (for-each (lambda (fname) (eval G (read-file fname))) fnames)))
